;; -*-lisp-*-
;; .stumpwmrc --- Stumpwm customizations

;; set-font
(set-font "lucidasans-12")

;; Declare what this file is for.
(in-package :stumpwm)

;; debug level
(setf stumpwm::*debug-level* 10)

;; load modules
(load "/home/kyle/.stumpwm.d/surfraw.lisp")

;; firefox
(defcommand firefox () ()
  "Start/Switchto Firefox."
  (run-or-raise "firefox" '(:class "Firefox")))
(define-key *root-map* (kbd "f") "firefox")
(define-key *root-map* (kbd "C-f") "firefox")

;; stardict
(defcommand stardict () ()
  "Start/Switchto Startdict."
  (run-or-raise "stardict" '(:class "Stardict")))
(define-key *root-map* (kbd "d") "stardict")
(define-key *root-map* (kbd "C-d") "stardict")

;; mlterm
(defcommand mlterm () ()
  "Start/switch to Mlterm."
  (run-or-raise "mlterm" '(:title "mlterm")))
(define-key *root-map* (kbd "m") "mlterm")
(define-key *root-map* (kbd "C-m") "mlterm")
(define-key *root-map* (kbd "c") "lastmsg")
(define-key *root-map* (kbd "C-c") "lastmsg")

;; colon
(define-key *root-map* (kbd "C-;") "colon")
(define-key *root-map* (kbd ":") "exec")

;; Customize modeline.
(setf *screen-mode-line-format* (list
                                 '(:eval (run-shell-command "date +%H:%M | tr -d '\\n'" t))
                                 " | %w")
      *mode-line-foreground-color* "white"
      *mode-line-background-color* "black"
      *mode-line-border-color* "white"
      *mode-line-position* :top
      *mode-line-border-width* 1
      *mode-line-timeout* 1
      *mode-line-pad-x* 1
      *mode-line-pad-y* 1
      )

(toggle-mode-line (current-screen)
		  (current-head))

;; message and input window
(set-bg-color "Gray")
(set-fg-color "Black")
(set-border-color "Red")
(set-msg-border-width 1)
(set-focus-color "Blue")

(setf *message-window-padding* 20
      *maxsize-border-width* 3
      *normal-border-width* 3
      *window-border-style* :thick
      *transient-border-width* 2
      *mouse-focus-policy* :sloppy
      *message-window-gravity* :bottom-right
      *input-window-gravity* :bottom-right
      *timeout-wait* 5)

;; Display the keysequence in progress
(defun key-press-hook (key key-seq cmd)
  (declare (ignore key))
  (unless (eq *top-map* *resize-map*)
    (let ((*message-window-gravity* :bottom-right))
      (message "Key sequence: ~A~%==> ~A"
               (print-key-seq (reverse key-seq)) cmd))))

(defmacro replace-hook (hook fn)
  `(remove-hook ,hook ,fn)
  `(add-hook ,hook ,fn))

(replace-hook *key-press-hook* 'key-press-hook)

;; shell command
(run-shell-command "/home/kyle/bin/nm-app")

;; Local Variables: **
;; mode:lisp **
;; mode:stumpwm **
;; outline-regexp: ";;; " **
;; End: **
